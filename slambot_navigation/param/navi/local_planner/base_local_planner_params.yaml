TrajectoryPlannerROS:
  ## ----- Robot Configuration Parameters -----
  ## (double [m/s^2], default: 2.5)
  ## x方向の最大加速度．
  acc_lim_x: 1.0

  ## (double [m/s^2], default: 2.5)
  ## y方向の最大加速度．（全方位移動車両等のホロノミックロボットの場合にのみ使用？）
  acc_lim_y: 0.0

  ## (double [rad/s^2], default: 3.2)
  ## 回転の最大角加速度．
  acc_lim_theta: 1.0

  ## (double [m/s], default: 0.5)
  ## x方向の最大速度
  max_vel_x: 0.30

  ## (double [m/s], default: 0.1)
  ## x方向の最小速度
  min_vel_x: 0.08

  ## (double [rad/s], default: 1.0)
  ## x方向の最大角速度
  max_vel_theta: 1.0

  ## (double [rad/s], default: -1.0)
  ## x方向の最小角速度
  min_vel_theta: -1.0

  ## (double [rad/s], default: 0.4)
  ## 目的地に到着し，ロボットの角度を合わせるために回転するときの最小角速度．
  min_in_place_vel_theta: 0.4

  ## escape_vel (double, default: -0.1)
  ## Speed used for driving during escapes in meters/sec.
  ## Note that it must be negative in order for the robot to actually reverse.
  ## A positive speed will cause the robot to move forward while attempting to escape.
  escape_vel: -0.1

  ## holonomic_robot (bool, default: true)
  ## ホロノミックなロボットかどうか．全方位移動車両の場合にはtrueにする．差動二輪やステアリング型の場合はfalse．
  holonomic_robot: false

  ## ***** The following parameters are only used if holonomic_robot is set to true *****
  ## y_vels (list, default: [-0.3, -0.1, 0.1, 0.3])
  ## The strafing velocities that a holonomic robot will consider in meters/sec
  #y_vels: [-0.3, -0.1, 0.1, 0.3]


  ## ----- Goal Tolerance Parameters -----
  ## yaw_goal_tolerance (double, default: 0.05)
  ## The tolerance in radians for the controller in yaw/rotation when achieving its goal.
  ## 目標角度と現在角度の差がyaw_goal_tolerance以下になった時，目標地点に到達したと判定する．
  yaw_goal_tolerance: 0.05

  ## xy_goal_tolerance (double, default: 0.10)
  ## The tolerance in meters for the controller in the x & y distance when achieving a goal.
  ## 目標地点と現在地点との距離がxy_goal_tolerance以下となった時，目標地点に到達したと判定する．
  xy_goal_tolerance: 0.10

  ## latch_xy_goal_tolerance (bool, default: false)
  ## If goal tolerance is latched, if the robot ever reaches the goal xy location it will simply rotate in place, even if it ends up outside the goal tolerance while it is doing so.
  latch_xy_goal_tolerance: false


  ## ----- Forward Simulation Parameters -----
  ## sim_time (double, default: 1.0)
  ## ロボットの移動を何秒間シミュレートするか．
  sim_time: 0.8

  ## sim_granularity (double, default: 0.025)
  ## 算出する経路のきめ細かさ．
  sim_granularity: 0.05

  ## angular_sim_granularity (double, default: ~<name>/sim_granularity)
  ## The step size, in radians, to take between angular samples on a given trajectory.
  #angular_sim_granularity:

  ## vx_samples (integer, default: 3)
  ## x軸速度空間で探索するサンプル数
  vx_samples: 18

  ## vtheta_samples (integer, default: 20)
  ## yaw軸速度空間で探索するサンプル数
  vtheta_samples: 20

  ## controller_frequency (double, default: 20.0)
  ## The frequency at which this controller will be called in Hz. Uses searchParam to read the parameter from parent namespaces if not set in the namespace of the controller.
  ## For use with move_base, this means that you only need to set its "controller_frequency" parameter and can safely leave this one unset.
  controller_frequency: 5.0


  ## ----- Trajectory Scoring Parameters -----
  ## meter_scoring (bool, default: false)
  ## Whether the gdist_scale and pdist_scale parameters should assume that goal_distance and path_distance are expressed in units of meters or cells. Cells are assumed by default.
  meter_scoring: false

  ## pdist_scale (double, default: 0.6)
  ## The weighting for how much the controller should stay close to the path it was given, maximal possible value is 5.0
  pdist_scale: 0.6

  ## gdist_scale (double, default: 0.8)
  ## The weighting for how much the controller should attempt to reach its local goal, also controls speed, maximal possible value is 5.0
  gdist_scale: 0.8

  ## occdist_scale (double, default: 0.01)
  ## The weighting for how much the controller should attempt to avoid obstacles
  occdist_scale: 0.01

  ## heading_lookahead (double, default: 0.325)
  ## How far to look ahead in meters when scoring different in-place-rotation trajectories
  heading_lookahead: 0.325

  ## heading_scoring (bool, default: false)
  ## Whether to score based on the robot's heading to the path or its distance from the path
  heading_scoring: false

  ## heading_scoring_timestep (double, default: 0.8)
  ## How far to look ahead in time in seconds along the simulated trajectory when using heading scoring
  heading_scoring_timestep: 0.8

  ## dwa (bool, default: true)
  ## Whether to use the Dynamic Window Approach (DWA)_ or whether to use Trajectory Rollout
  ## (<NOTE> In our experience DWA worked as well as Trajectory Rollout and is computationally less expensive. It is possible that robots with extremely poor acceleration limits could gain from running Trajectory Rollout, but we recommend trying DWA first.)
  dwa: true

  ## publish_cost_grid_pc (bool, default: false)
  ## Whether or not to publish the cost grid that the planner will use when planning.
  ## When true, a sensor_msgs/PointCloud2 will be available on the ~<name>/cost_cloud topic.
  ## Each point cloud represents the cost grid and has a field for each individual scoring function component as well as the overall cost for each cell, taking the scoring parameters into account.
  publish_cost_grid_pc: false

  ## global_frame_id (string, default: odom)
  ## The frame to set for the cost_cloud. Should be set to the same frame as the local costmap's global frame.
  global_frame_id: odom


  ## ----- Oscillation Prevention Parameters -----
  ## oscillation_reset_dist (double, default: 0.05)
  ## How far the robot must travel in meters before oscillation flags are reset.
  oscillation_reset_dist: 0.05


  ## ----- Global Plan Parameters -----
  ## prune_plan (bool, default: true)
  ## Defines whether or not to eat up the plan as the robot moves along the path.
  ## If set to true, points will fall off the end of the plan once the robot moves 1 meter past them.
  prune_plan: true
