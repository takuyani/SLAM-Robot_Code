# ========== Overall filter parameters ==========

# min_particles (int, default: 100)
# Minimum allowed number of particles.
min_particles: 100

# max_particles (int, default: 5000)
# Maximum allowed number of particles.
max_particles: 10000

# kld_err (double, default: 0.01)
# Maximum error between the true distribution and the estimated distribution.
kld_err: 0.05

# kld_z (double, default: 0.99)
# Upper standard normal quantile for (1 - p), where p is the probability that the error on the estimated distrubition will be less than kld_err.
kld_z: 0.99

# update_min_d (double, default: 0.2 meters)
# Translational movement required before performing a filter update.
update_min_d: 0.1

# update_min_a (double, default: π/6.0 radians)
# Rotational movement required before performing a filter update.
update_min_a: 0.5235

# resample_interval (int, default: 2)
# Number of filter updates required before resampling.
resample_interval: 1

# transform_tolerance (double, default: 0.1 seconds)
# Time with which to post-date the transform that is published, to indicate that this transform is valid into the future.
transform_tolerance: 0.2

# recovery_alpha_slow (double, default: 0.0 (disabled))
# Exponential decay rate for the slow average weight filter, used in deciding when to recover by adding random poses. A good value might be 0.001.
recovery_alpha_slow: 0.001

# recovery_alpha_fast (double, default: 0.0 (disabled))
# Exponential decay rate for the fast average weight filter, used in deciding when to recover by adding random poses. A good value might be 0.1.
recovery_alpha_fast: 0.1

# initial_pose_x (double, default: 0.0 meters)
# Initial pose mean (x), used to initialize filter with Gaussian distribution.
initial_pose_x: 0.0

# initial_pose_y (double, default: 0.0 meters)
# Initial pose mean (y), used to initialize filter with Gaussian distribution.
initial_pose_y: 0.0

# initial_pose_a (double, default: 0.0 radians)
# Initial pose mean (yaw), used to initialize filter with Gaussian distribution.
initial_pose_a: 0.0

# initial_cov_xx (double, default: 0.5*0.5 meters)
# Initial pose covariance (x*x), used to initialize filter with Gaussian distribution.
initial_cov_xx: 0.25

# initial_cov_yy (double, default: 0.5*0.5 meters)
# Initial pose covariance (y*y), used to initialize filter with Gaussian distribution.
initial_cov_yy: 0.25

# initial_cov_aa (double, default: (π/12)*(π/12) radian)
# Initial pose covariance (yaw*yaw), used to initialize filter with Gaussian distribution.
initial_cov_aa: 0.06853

# gui_publish_rate (double, default: -1.0 Hz)
# Maximum rate (Hz) at which scans and paths are published for visualization, -1.0 to disable.
gui_publish_rate: 10.0

# save_pose_rate (double, default: 0.5 Hz)
# Maximum rate (Hz) at which to store the last estimated pose and covariance to the parameter server, in the variables ~initial_pose_* and ~initial_cov_*.
# This saved pose will be used on subsequent runs to initialize the filter. -1.0 to disable.
save_pose_rate: 0.5

# use_map_topic (bool, default: false)
# When set to true, AMCL will subscribe to the map topic rather than making a service call to receive its map.
use_map_topic: true

# first_map_only (bool, default: false)
# When set to true, AMCL will only use the first map it subscribes to, rather than updating each time a new one is received.
first_map_only: false


# ========== Laser Model Parameters ==========

# laser_min_range (double, default: -1.0)
# Minimum scan range to be considered; -1.0 will cause the laser's reported minimum range to be used.
laser_min_range: -1.0

# laser_max_range (double, default: -1.0)
# Maximum scan range to be considered; -1.0 will cause the laser's reported maximum range to be used.
laser_max_range: -1.0

# laser_max_beams (int, default: 30)
# How many evenly-spaced beams in each scan to be used when updating the filter.
laser_max_beams: 30

# laser_z_hit (double, default: 0.95)
# Mixture weight for the z_hit part of the model.
laser_z_hit: 0.5

# laser_z_short (double, default: 0.1)
# Mixture weight for the z_short part of the model.
laser_z_short: 0.1

# laser_z_max (double, default: 0.05)
# Mixture weight for the z_max part of the model.
laser_z_max: 0.05

# laser_z_rand (double, default: 0.05)
# Mixture weight for the z_rand part of the model.
laser_z_rand: 0.05

# laser_sigma_hit (double, default: 0.2 meters)
# Standard deviation for Gaussian model used in z_hit part of the model.
laser_sigma_hit: 0.2

# laser_lambda_short (double, default: 0.1)
# Exponential decay parameter for z_short part of model.
laser_lambda_short: 0.1

# laser_likelihood_max_dist (double, default: 2.0 meters)
# Maximum distance to do obstacle inflation on map, for use in likelihood_field model.
laser_likelihood_max_dist: 2.0

# laser_model_type (string, default: "likelihood_field")
# Which model to use, either beam, likelihood_field, or likelihood_field_prob (same as likelihood_field but incorporates the beamskip feature, if enabled).
laser_model_type: likelihood_field


# ========== Odometery model parameters ==========

# odom_model_type (string, default: "diff")
# Which model to use, either "diff", "omni", "diff-corrected" or "omni-corrected".
odom_model_type: diff

# odom_alpha1 (double, default: 0.2)
# Specifies the expected noise in odometry's rotation estimate from the rotational component of the robot's motion.
odom_alpha1: 0.2

# odom_alpha2 (double, default: 0.2)
# Specifies the expected noise in odometry's rotation estimate from translational component of the robot's motion.
odom_alpha2: 0.2

# odom_alpha3 (double, default: 0.2)
# Specifies the expected noise in odometry's translation estimate from the translational component of the robot's motion.
odom_alpha3: 0.2

# odom_alpha4 (double, default: 0.2)
# Specifies the expected noise in odometry's translation estimate from the rotational component of the robot's motion.
odom_alpha4: 0.2

# odom_alpha5 (double, default: 0.2)
# Translation-related noise parameter (only used if model is "omni").
odom_alpha5: 0.2

# odom_frame_id (string, default: "odom")
# Which frame to use for odometry.
odom_frame_id: odom

# base_frame_id (string, default: "base_link")
# Which frame to use for the robot base.
base_frame_id: base_footprint

# global_frame_id (string, default: "map")
# The name of the coordinate frame published by the localization system.
global_frame_id: map

# tf_broadcast (bool, default: true)
# Set this to false to prevent amcl from publishing the transform between the global frame and the odometry frame.
tf_broadcast: true
